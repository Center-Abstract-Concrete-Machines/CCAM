---
import { getCollection } from 'astro:content';
import ResourceType from '@components/ResourceType.astro';
import HorizontalSpacer from './HorizontalSpacer.astro';

const resources = await getCollection('resources');
const uniqueResourceTypes = Array.from(
    new Set([
        'all',
        ...resources.map((resource) => resource.data.type.toLowerCase()),
    ])
);

const { activeType } = Astro.props;

function resourceIsActive(type) {
    if (activeType === 'all') return true;
    if (activeType === type) return true;
    else return false;
}
---

<div
    class="flex justify-between flex-wrap items-center gap-4 font-mono text-xs px-4"
>
    <select
        name="sortResources"
        id="sortResources"
        class="bg-backgroundColor border border-dashed border-borderColor/30 px-4 py-2 font-mono text-xs"
    >
        <option value="" disabled selected>Sort</option>
        <option value="alphaAsc">Title</option>
        <!-- <option value="alphaDesc">Alphabetic (desc.)</option> -->
        <!-- <option value="dateAsc">Date added (asc.)</option> -->
        <option value="dateDesc">Most Recent</option>
    </select>
    <div class="flex gap-4 flex-wrap">
        {
            uniqueResourceTypes.map((type) => (
                <a href={`/resources/${type === 'all' ? '' : type}`}>
                    <ResourceType type={type} active={resourceIsActive(type)} />
                </a>
            ))
        }
    </div>
</div>
<HorizontalSpacer class="mt-4" />

<style>
    select {
        border-radius: 0;
        -webkit-appearance: none;
    }
</style>

<script>
    import { doSorts, type SortOrder } from 'src/utils/sortHTMLElements.ts';

    document.addEventListener('astro:page-load', () => {
        const resourceCards: NodeListOf<HTMLDivElement> =
            document.querySelectorAll('.resource-card');
        let parentContainer;
        if (resourceCards.length > 0)
            parentContainer = resourceCards[0].parentElement;

        const selectEl = document.getElementById(
            'sortResources'
        ) as HTMLSelectElement;

        let lastSpacer;
        // Undo previous hiding spacer
        lastSpacer = Array.from(
            document.querySelectorAll(
                '.spacer-container'
            ) as NodeListOf<HTMLDivElement>
        );
        if (lastSpacer.length > 0) lastSpacer.at(-1).style.display = 'block';

        const preference = sessionStorage.getItem('sortResources');

        if (preference && selectEl) {
            selectEl.value = preference;
            doSorts(
                parentContainer,
                resourceCards,
                selectEl.value as SortOrder
            );
        }

        // Hide last spacer
        lastSpacer = Array.from(
            document.querySelectorAll(
                '.spacer-container'
            ) as NodeListOf<HTMLDivElement>
        );
        if (lastSpacer.length > 0) lastSpacer.at(-1).style.display = 'none';
        if (selectEl) {
            selectEl.addEventListener('change', () => {
                console.log('In selectEL conditional');
                let lastSpacer;
                // Undo previous hiding spacer
                lastSpacer = Array.from(
                    document.querySelectorAll(
                        '.spacer-container'
                    ) as NodeListOf<HTMLDivElement>
                );
                if (lastSpacer.length > 0)
                    lastSpacer.at(-1).style.display = 'block';

                doSorts(
                    parentContainer,
                    resourceCards,
                    selectEl.value as SortOrder
                );

                // Hide new last spacer
                lastSpacer = Array.from(
                    document.querySelectorAll(
                        '.spacer-container'
                    ) as NodeListOf<HTMLDivElement>
                );
                if (lastSpacer.length > 0)
                    lastSpacer.at(-1).style.display = 'none';
            });
        }
    });
</script>
