---
import SearchLayout from '@layouts/SearchLayout.astro';
import { getCollection } from 'astro:content';
import { filterDraftsAndPubDate } from '@utils/programFilters';

import ResourceCard from '@components/ResourceCard.astro';
import HorizontalSpacer from '@components/HorizontalSpacer.astro';

export async function getStaticPaths() {
    const allPrograms = await getCollection('programs', filterDraftsAndPubDate);
    const allResources = await getCollection('resources');
    const allProjects = await getCollection('projects');
    const allPeople = await getCollection('people');

    const uniqueTags = Array.from(
        new Set([
            ...allProjects.map((project) => project.data.tags).flat(),
            ...allPrograms.map((program) => program.data.tags).flat(),
            ...allResources.map((resource) => resource.data.tags).flat(),
            ...allPeople.map((person) => person.slug).flat(),
        ])
    ).sort(new Intl.Collator('en-US', { sensitivity: 'base' }).compare);

    function personSlugInEvent(event, personSlug) {
        const categoryArray = event.data.people;
        if (!categoryArray) return false;
        const boolArray = categoryArray.map((category) =>
            category.list.includes(personSlug)
        );
        return boolArray.includes(true);
    }

    return uniqueTags.map((tag) => {
        const filteredPrograms = allPrograms
            .filter(
                (program) =>
                    program.data.tags.includes(tag) ||
                    personSlugInEvent(program, tag)
            )
            .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
            .map((obj) => ({
                ...obj,
                metaType: 'Program',
                metaSlug: 'programs',
            }));
        const filteredResources = allResources
            .filter((resource) => resource.data.tags.includes(tag))
            .map((obj) => ({
                ...obj,
                metaType: 'Resource',
                metaSlug: 'resources',
            }));
        const filteredProjects = allProjects
            .filter(
                (project) =>
                    project.data.tags.includes(tag) ||
                    personSlugInEvent(project, tag)
            )
            .sort(
                (a, b) =>
                    b.data.dateAdded.getTime() - a.data.dateAdded.getTime()
            )
            .map((obj) => ({
                ...obj,
                metaType: 'Project',
                metaSlug: 'projects',
            }));

        const allResults = [
            ...filteredProjects,
            ...filteredPrograms,
            ...filteredResources,
        ];

        return {
            params: { tag },
            props: {
                // programs: filteredPrograms,
                // resources: filteredResources,
                // projects: filteredProjects,
                uniqueTags,
                allResults,
            },
        };
    });
}

const { tag } = Astro.params;
const { allResults } = Astro.props;
---

<SearchLayout tag={tag}>
    {
        allResults &&
            allResults.map((result) => (
                <>
                    <div class="search-result relative">
                        <ResourceCard
                            metadata={result.data}
                            slug={result.slug}
                            metaType={result.metaType}
                            metaSlug={result.metaSlug}
                        />
                    </div>
                    <div class="result-spacer">
                        <HorizontalSpacer />
                    </div>
                </>
            ))
    }
</SearchLayout>

<style>
    .result-spacer:last-of-type {
        display: none;
    }
</style>
